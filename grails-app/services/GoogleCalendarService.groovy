import com.google.gdata.data.PlainTextConstruct
import com.google.gdata.data.calendar.CalendarEntry;
import com.google.gdata.util.AuthenticationException
import com.google.gdata.data.calendar.CalendarFeed;
import com.google.gdata.client.calendar.CalendarService
import com.google.gdata.data.calendar.CalendarEventEntry

class GoogleCalendarService {

    def getConnection(login, password) {
        CalendarService googleService = new CalendarService("iceScrum")
        try {
            googleService.setUserCredentials(login, password);
        }
        catch (AuthenticationException e) {
            return false
        }
        return googleService
    }

    def createCalendar(CalendarService service, login, password, calendarName) {
        CalendarEntry calendar = getCalendar(service, login, calendarName)
        if(!calendar) {
            calendar = new CalendarEntry()
            calendar.setTitle(new PlainTextConstruct(calendarName))
            calendar.setSummary(new PlainTextConstruct("Auto-generated by iceScrum"))
            return postCalendar(service, login, calendar)
        }
        return calendar;
    }

    def postCalendar(CalendarService service, login, CalendarEntry calendar) {
        try {
            return service.insert(getPostUrl(login, true), calendar);
        }
        catch (Exception e) {
            e.printStackTrace()
        }
        return calendar;
    }

    def getCalendar(CalendarService service, login, calendarName) {
        CalendarFeed resultFeed = null
        try {
            resultFeed = service.getFeed(getPostUrl(login, true), CalendarFeed.class)
        } catch (Exception e) {
            e.printStackTrace()
        }

        for(int i = 0; i < resultFeed.getEntries().size(); i++)
            if(resultFeed.getEntries().get(i).getTitle().getPlainText().equals(calendarName))
                return resultFeed.getEntries().get(i)

        return null;
    }

    def deleteCalendar(CalendarService service, login, calendarName) {
        CalendarEntry calendar = getCalendar(service, login, calendarName)
        try {
            calendar.delete()
        } catch (Exception e) {
            System.out.println("Unable to delete calendar : " + calendar.getTitle().getPlainText())
        }
    }

    def getPostUrl(login, isCalendar) {
        if(isCalendar)
            return new URL("https://www.google.com/calendar/feeds/"+login+"/owncalendars/full")
        return new URL("https://www.google.com/calendar/feeds/"+login+"/private/full")
    }

    def getNewEvent(eventName, comment) {
        CalendarEventEntry newEvent = new CalendarEventEntry()
        newEvent.setTitle(new PlainTextConstruct(eventName))
        if(comment)
            newEvent.setContent(new PlainTextConstruct(comment))
        return newEvent
    }

    def sendEvent(CalendarService service, login, event){
        return service.insert(getPostUrl(login, false), event)
    }

}